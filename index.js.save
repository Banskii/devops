const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path'); // Required for static file serving
const User = require('./models/user'); // Import the User model

const app = express();

// Serve static files from the 'public' folder
app.use(express.static(path.join(__dirname, 'public')));

// Middleware to parse JSON request bodies
app.use(bodyParser.json());

// MongoDB connection string
const dbUri = "mongodb+srv://tekenaotus:UPZDYYt0waZDQSv5@cluster0.8o0rm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// Connect to MongoDB using Mongoose
mongoose.connect(dbUri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log("MongoDB connected");
    app.listen(3002, () => {
      console.log('server running on port 3002');
    });
  })
  .catch((err) => {
    console.error("MongoDB connection error:", err);
    process.exit(1);
  });

// Admin email address that is hardcoded
// const adminEmail = "admin@example.com";

// User Registration Route
app.post('http://54.175.240.248:3002/register', async (req, res) => {
  const { email, firstname, lastname, password } = req.body;

  try {
    // Check if the user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Determine if the user is admin based on the email
    // const role = email === adminEmail ? 'admin' : 'user';

    // Create new user
    const newUser = new User({
      email,
      firstname,
      lastname,
      password,
//      role,  Set the role based on the email
    });

    // Save the user to the database
    await newUser.save();
    res.status(201).json({ message: 'User created successfully' });

  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// User Login Route
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Find user by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Compare entered password with stored password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Login successful, do not send the role
    res.status(200).json({
      message: 'Login successful',
      // Optionally send a JWT token or session ID, not the role
    });

  } catch (error) {
    console.error('Error logging in:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// the dashboard route
app.get('/dashboard', (req, res) => {
  res.send('Welcome to dashboard!!!');
});

// Start the Express server
//const port = 3002;
//app.listen(port, () => {
//  console.log(`Server running on http://localhost:${port}`);
//});
